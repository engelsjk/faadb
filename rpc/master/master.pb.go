// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.16.0
// source: master.proto

package master

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Query for Aircraft.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NNumber                         string `protobuf:"bytes,1,opt,name=NNumber,proto3" json:"NNumber,omitempty"`
	SerialNumber                    string `protobuf:"bytes,2,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	ModeSCodeHex                    string `protobuf:"bytes,3,opt,name=ModeSCodeHex,proto3" json:"ModeSCodeHex,omitempty"`
	RegistrantName                  string `protobuf:"bytes,4,opt,name=RegistrantName,proto3" json:"RegistrantName,omitempty"`
	RegistrantStreet1               string `protobuf:"bytes,5,opt,name=RegistrantStreet1,proto3" json:"RegistrantStreet1,omitempty"`
	RegistrantState                 string `protobuf:"bytes,6,opt,name=RegistrantState,proto3" json:"RegistrantState,omitempty"`
	AircraftModelCode               string `protobuf:"bytes,7,opt,name=AircraftModelCode,proto3" json:"AircraftModelCode,omitempty"`
	ApprovedOperationCode           string `protobuf:"bytes,8,opt,name=ApprovedOperationCode,proto3" json:"ApprovedOperationCode,omitempty"`
	AirworthinessClassificationCode string `protobuf:"bytes,9,opt,name=AirworthinessClassificationCode,proto3" json:"AirworthinessClassificationCode,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{0}
}

func (x *Query) GetNNumber() string {
	if x != nil {
		return x.NNumber
	}
	return ""
}

func (x *Query) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Query) GetModeSCodeHex() string {
	if x != nil {
		return x.ModeSCodeHex
	}
	return ""
}

func (x *Query) GetRegistrantName() string {
	if x != nil {
		return x.RegistrantName
	}
	return ""
}

func (x *Query) GetRegistrantStreet1() string {
	if x != nil {
		return x.RegistrantStreet1
	}
	return ""
}

func (x *Query) GetRegistrantState() string {
	if x != nil {
		return x.RegistrantState
	}
	return ""
}

func (x *Query) GetAircraftModelCode() string {
	if x != nil {
		return x.AircraftModelCode
	}
	return ""
}

func (x *Query) GetApprovedOperationCode() string {
	if x != nil {
		return x.ApprovedOperationCode
	}
	return ""
}

func (x *Query) GetAirworthinessClassificationCode() string {
	if x != nil {
		return x.AirworthinessClassificationCode
	}
	return ""
}

// A.
type A struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NNumber                                             string `protobuf:"bytes,1,opt,name=NNumber,proto3" json:"NNumber,omitempty"`
	SerialNumber                                        string `protobuf:"bytes,2,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	ManufacturerAircraftModelCode                       string `protobuf:"bytes,3,opt,name=ManufacturerAircraftModelCode,proto3" json:"ManufacturerAircraftModelCode,omitempty"`
	ManufacturerEngineModelCode                         string `protobuf:"bytes,4,opt,name=ManufacturerEngineModelCode,proto3" json:"ManufacturerEngineModelCode,omitempty"`
	ManufacturerYear                                    string `protobuf:"bytes,5,opt,name=ManufacturerYear,proto3" json:"ManufacturerYear,omitempty"`
	RegistrantType                                      string `protobuf:"bytes,6,opt,name=RegistrantType,proto3" json:"RegistrantType,omitempty"`
	RegistrantName                                      string `protobuf:"bytes,7,opt,name=RegistrantName,proto3" json:"RegistrantName,omitempty"`
	RegistrantStreet1                                   string `protobuf:"bytes,8,opt,name=RegistrantStreet1,proto3" json:"RegistrantStreet1,omitempty"`
	RegistrantStreet2                                   string `protobuf:"bytes,9,opt,name=RegistrantStreet2,proto3" json:"RegistrantStreet2,omitempty"`
	RegistrantCity                                      string `protobuf:"bytes,10,opt,name=RegistrantCity,proto3" json:"RegistrantCity,omitempty"`
	RegistrantState                                     string `protobuf:"bytes,11,opt,name=RegistrantState,proto3" json:"RegistrantState,omitempty"`
	RegistrantZipCode                                   string `protobuf:"bytes,12,opt,name=RegistrantZipCode,proto3" json:"RegistrantZipCode,omitempty"`
	RegistrantRegion                                    string `protobuf:"bytes,13,opt,name=RegistrantRegion,proto3" json:"RegistrantRegion,omitempty"`
	RegistrantCounty                                    string `protobuf:"bytes,14,opt,name=RegistrantCounty,proto3" json:"RegistrantCounty,omitempty"`
	RegistrantCountry                                   string `protobuf:"bytes,15,opt,name=RegistrantCountry,proto3" json:"RegistrantCountry,omitempty"`
	LastActivityDate                                    string `protobuf:"bytes,16,opt,name=LastActivityDate,proto3" json:"LastActivityDate,omitempty"`
	CertificationIssueDate                              string `protobuf:"bytes,17,opt,name=CertificationIssueDate,proto3" json:"CertificationIssueDate,omitempty"`
	CertificationAirworthinessClassificationCode        string `protobuf:"bytes,18,opt,name=CertificationAirworthinessClassificationCode,proto3" json:"CertificationAirworthinessClassificationCode,omitempty"`
	CertificationAirworthinessClassificationDescription string `protobuf:"bytes,19,opt,name=CertificationAirworthinessClassificationDescription,proto3" json:"CertificationAirworthinessClassificationDescription,omitempty"`
	CertificationApprovedOperationCode                  string `protobuf:"bytes,20,opt,name=CertificationApprovedOperationCode,proto3" json:"CertificationApprovedOperationCode,omitempty"`
	CertificationApprovedOperationDescription           string `protobuf:"bytes,21,opt,name=CertificationApprovedOperationDescription,proto3" json:"CertificationApprovedOperationDescription,omitempty"`
	AircraftType                                        string `protobuf:"bytes,22,opt,name=AircraftType,proto3" json:"AircraftType,omitempty"`
	EngineType                                          string `protobuf:"bytes,23,opt,name=EngineType,proto3" json:"EngineType,omitempty"`
	Status                                              string `protobuf:"bytes,24,opt,name=Status,proto3" json:"Status,omitempty"`
	ModeSCode                                           string `protobuf:"bytes,25,opt,name=ModeSCode,proto3" json:"ModeSCode,omitempty"`
	ModeSCodeHex                                        string `protobuf:"bytes,26,opt,name=ModeSCodeHex,proto3" json:"ModeSCodeHex,omitempty"`
	AirworthinessDate                                   string `protobuf:"bytes,27,opt,name=AirworthinessDate,proto3" json:"AirworthinessDate,omitempty"`
	OwnershipFractional                                 bool   `protobuf:"varint,28,opt,name=OwnershipFractional,proto3" json:"OwnershipFractional,omitempty"`
	OwnershipOtherName1                                 string `protobuf:"bytes,29,opt,name=OwnershipOtherName1,proto3" json:"OwnershipOtherName1,omitempty"`
	OwnershipOtherName2                                 string `protobuf:"bytes,30,opt,name=OwnershipOtherName2,proto3" json:"OwnershipOtherName2,omitempty"`
	OwnershipOtherName3                                 string `protobuf:"bytes,31,opt,name=OwnershipOtherName3,proto3" json:"OwnershipOtherName3,omitempty"`
	OwnershipOtherName4                                 string `protobuf:"bytes,32,opt,name=OwnershipOtherName4,proto3" json:"OwnershipOtherName4,omitempty"`
	OwnershipOtherName5                                 string `protobuf:"bytes,33,opt,name=OwnershipOtherName5,proto3" json:"OwnershipOtherName5,omitempty"`
	ExpirationDate                                      string `protobuf:"bytes,34,opt,name=ExpirationDate,proto3" json:"ExpirationDate,omitempty"`
	UniqueID                                            string `protobuf:"bytes,35,opt,name=UniqueID,proto3" json:"UniqueID,omitempty"`
	KitManufacturerName                                 string `protobuf:"bytes,36,opt,name=KitManufacturerName,proto3" json:"KitManufacturerName,omitempty"`
	KitModelName                                        string `protobuf:"bytes,37,opt,name=KitModelName,proto3" json:"KitModelName,omitempty"`
}

func (x *A) Reset() {
	*x = A{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A) ProtoMessage() {}

func (x *A) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A.ProtoReflect.Descriptor instead.
func (*A) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{1}
}

func (x *A) GetNNumber() string {
	if x != nil {
		return x.NNumber
	}
	return ""
}

func (x *A) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *A) GetManufacturerAircraftModelCode() string {
	if x != nil {
		return x.ManufacturerAircraftModelCode
	}
	return ""
}

func (x *A) GetManufacturerEngineModelCode() string {
	if x != nil {
		return x.ManufacturerEngineModelCode
	}
	return ""
}

func (x *A) GetManufacturerYear() string {
	if x != nil {
		return x.ManufacturerYear
	}
	return ""
}

func (x *A) GetRegistrantType() string {
	if x != nil {
		return x.RegistrantType
	}
	return ""
}

func (x *A) GetRegistrantName() string {
	if x != nil {
		return x.RegistrantName
	}
	return ""
}

func (x *A) GetRegistrantStreet1() string {
	if x != nil {
		return x.RegistrantStreet1
	}
	return ""
}

func (x *A) GetRegistrantStreet2() string {
	if x != nil {
		return x.RegistrantStreet2
	}
	return ""
}

func (x *A) GetRegistrantCity() string {
	if x != nil {
		return x.RegistrantCity
	}
	return ""
}

func (x *A) GetRegistrantState() string {
	if x != nil {
		return x.RegistrantState
	}
	return ""
}

func (x *A) GetRegistrantZipCode() string {
	if x != nil {
		return x.RegistrantZipCode
	}
	return ""
}

func (x *A) GetRegistrantRegion() string {
	if x != nil {
		return x.RegistrantRegion
	}
	return ""
}

func (x *A) GetRegistrantCounty() string {
	if x != nil {
		return x.RegistrantCounty
	}
	return ""
}

func (x *A) GetRegistrantCountry() string {
	if x != nil {
		return x.RegistrantCountry
	}
	return ""
}

func (x *A) GetLastActivityDate() string {
	if x != nil {
		return x.LastActivityDate
	}
	return ""
}

func (x *A) GetCertificationIssueDate() string {
	if x != nil {
		return x.CertificationIssueDate
	}
	return ""
}

func (x *A) GetCertificationAirworthinessClassificationCode() string {
	if x != nil {
		return x.CertificationAirworthinessClassificationCode
	}
	return ""
}

func (x *A) GetCertificationAirworthinessClassificationDescription() string {
	if x != nil {
		return x.CertificationAirworthinessClassificationDescription
	}
	return ""
}

func (x *A) GetCertificationApprovedOperationCode() string {
	if x != nil {
		return x.CertificationApprovedOperationCode
	}
	return ""
}

func (x *A) GetCertificationApprovedOperationDescription() string {
	if x != nil {
		return x.CertificationApprovedOperationDescription
	}
	return ""
}

func (x *A) GetAircraftType() string {
	if x != nil {
		return x.AircraftType
	}
	return ""
}

func (x *A) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *A) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *A) GetModeSCode() string {
	if x != nil {
		return x.ModeSCode
	}
	return ""
}

func (x *A) GetModeSCodeHex() string {
	if x != nil {
		return x.ModeSCodeHex
	}
	return ""
}

func (x *A) GetAirworthinessDate() string {
	if x != nil {
		return x.AirworthinessDate
	}
	return ""
}

func (x *A) GetOwnershipFractional() bool {
	if x != nil {
		return x.OwnershipFractional
	}
	return false
}

func (x *A) GetOwnershipOtherName1() string {
	if x != nil {
		return x.OwnershipOtherName1
	}
	return ""
}

func (x *A) GetOwnershipOtherName2() string {
	if x != nil {
		return x.OwnershipOtherName2
	}
	return ""
}

func (x *A) GetOwnershipOtherName3() string {
	if x != nil {
		return x.OwnershipOtherName3
	}
	return ""
}

func (x *A) GetOwnershipOtherName4() string {
	if x != nil {
		return x.OwnershipOtherName4
	}
	return ""
}

func (x *A) GetOwnershipOtherName5() string {
	if x != nil {
		return x.OwnershipOtherName5
	}
	return ""
}

func (x *A) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *A) GetUniqueID() string {
	if x != nil {
		return x.UniqueID
	}
	return ""
}

func (x *A) GetKitManufacturerName() string {
	if x != nil {
		return x.KitManufacturerName
	}
	return ""
}

func (x *A) GetKitModelName() string {
	if x != nil {
		return x.KitModelName
	}
	return ""
}

type Aircraft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A []*A `protobuf:"bytes,1,rep,name=A,proto3" json:"A,omitempty"`
}

func (x *Aircraft) Reset() {
	*x = Aircraft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aircraft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aircraft) ProtoMessage() {}

func (x *Aircraft) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aircraft.ProtoReflect.Descriptor instead.
func (*Aircraft) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{2}
}

func (x *Aircraft) GetA() []*A {
	if x != nil {
		return x.A
	}
	return nil
}

var File_master_proto protoreflect.FileDescriptor

var file_master_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x65, 0x6e, 0x67, 0x65, 0x6c, 0x73, 0x6a, 0x6b, 0x2e, 0x66, 0x61, 0x61, 0x64, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x22, 0x97, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x4e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x65,
	0x78, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x69,
	0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x41, 0x69, 0x72, 0x77, 0x6f, 0x72, 0x74,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x41, 0x69, 0x72, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xa1, 0x0e, 0x0a, 0x01, 0x41, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x4d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x31, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x74, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x5a, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a,
	0x2c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69,
	0x72, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x2c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x69, 0x72, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x70, 0x0a, 0x33, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x69, 0x72, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x33,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x72,
	0x77, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x22, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x22, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x29, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x29, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x78, 0x12,
	0x2c, 0x0a, 0x11, 0x41, 0x69, 0x72, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x69, 0x72, 0x77,
	0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x30, 0x0a, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x31, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x33, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x34, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x34, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x35, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x35, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x44, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x13, 0x4b, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4b, 0x69, 0x74, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x4b, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4b, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x08, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x26, 0x0a, 0x01, 0x41, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6e, 0x67,
	0x65, 0x6c, 0x73, 0x6a, 0x6b, 0x2e, 0x66, 0x61, 0x61, 0x64, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x52, 0x01, 0x41, 0x32, 0x56, 0x0a, 0x06, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x65, 0x6c, 0x73, 0x6a, 0x6b, 0x2e, 0x66, 0x61, 0x61, 0x64,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f,
	0x2e, 0x65, 0x6e, 0x67, 0x65, 0x6c, 0x73, 0x6a, 0x6b, 0x2e, 0x66, 0x61, 0x61, 0x64, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x42,
	0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e,
	0x67, 0x65, 0x6c, 0x73, 0x6a, 0x6b, 0x2f, 0x66, 0x61, 0x61, 0x64, 0x62, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x3b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_master_proto_rawDescOnce sync.Once
	file_master_proto_rawDescData = file_master_proto_rawDesc
)

func file_master_proto_rawDescGZIP() []byte {
	file_master_proto_rawDescOnce.Do(func() {
		file_master_proto_rawDescData = protoimpl.X.CompressGZIP(file_master_proto_rawDescData)
	})
	return file_master_proto_rawDescData
}

var file_master_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_master_proto_goTypes = []interface{}{
	(*Query)(nil),    // 0: engelsjk.faadb.master.Query
	(*A)(nil),        // 1: engelsjk.faadb.master.A
	(*Aircraft)(nil), // 2: engelsjk.faadb.master.Aircraft
}
var file_master_proto_depIdxs = []int32{
	1, // 0: engelsjk.faadb.master.Aircraft.A:type_name -> engelsjk.faadb.master.A
	0, // 1: engelsjk.faadb.master.Master.GetAircraft:input_type -> engelsjk.faadb.master.Query
	2, // 2: engelsjk.faadb.master.Master.GetAircraft:output_type -> engelsjk.faadb.master.Aircraft
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_master_proto_init() }
func file_master_proto_init() {
	if File_master_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aircraft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_master_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_master_proto_goTypes,
		DependencyIndexes: file_master_proto_depIdxs,
		MessageInfos:      file_master_proto_msgTypes,
	}.Build()
	File_master_proto = out.File
	file_master_proto_rawDesc = nil
	file_master_proto_goTypes = nil
	file_master_proto_depIdxs = nil
}
